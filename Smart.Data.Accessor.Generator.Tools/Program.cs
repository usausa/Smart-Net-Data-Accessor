namespace Smart.Data.Accessor.Generator;

using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Loader;
using System.Text;

public static class Program
{
    private const string AssemblySource = "Assembly.g.cs";

    public static void Main(string[] args)
    {
        var target = Path.GetFullPath(args[0]);
        var outputDirectory = Path.GetFullPath(args[1]);
        var references = File.ReadAllLines(Path.GetFullPath(args[2]))
            .Select(x => new Reference(x))
            .ToDictionary(x => x.Name);
        var sqlRootDirectory = Path.GetFullPath(args[3]);
        var sqlRootNamespace = args[4];
        var sqlSubDirectory = args[5];

        var targetAssembly = Assembly.LoadFile(target);
        var context = AssemblyLoadContext.GetLoadContext(targetAssembly);
        context!.Resolving += (_, name) =>
        {
            if (references.TryGetValue(name.Name!, out var reference))
            {
                return context.LoadFromAssemblyPath(reference.FilePath);
            }

            return null;
        };

        var assembly = context.LoadFromAssemblyPath(target);

        var loader = new FileSqlLoader(sqlRootDirectory, sqlRootNamespace, sqlSubDirectory);
        var writer = new FileSourceWriter(outputDirectory);
        var generator = new DataAccessorGenerator(loader, writer);
        generator.Generate(assembly.GetExportedTypes());

        var assemblySource = Path.Combine(outputDirectory, AssemblySource);
        WriteAssembly(targetAssembly, assemblySource);

        var newFiles = writer.NewFiles.Append(AssemblySource).ToHashSet();
        foreach (var file in Directory.GetFiles(outputDirectory).Select(Path.GetFileName))
        {
            if (!newFiles.Contains(file!))
            {
                File.Delete(Path.Combine(outputDirectory, file!));
            }
        }
    }

    private static void WriteAssembly(Assembly assembly, string path)
    {
        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("// Option:");
        sb.AppendLine("using System.Reflection;");
        sb.AppendLine();
        sb.Append("[assembly: AssemblyVersion(\"").Append(assembly.GetName().Version).AppendLine("\")]");
        var fileVersion = assembly.GetCustomAttribute<AssemblyFileVersionAttribute>();
        if (fileVersion is not null)
        {
            sb.Append("[assembly: AssemblyFileVersion(\"").Append(fileVersion.Version).AppendLine("\")]");
        }
        var informationVersion = assembly.GetCustomAttribute<AssemblyInformationalVersionAttribute>();
        if (informationVersion is not null)
        {
            sb.Append("[assembly: AssemblyInformationalVersion(\"").Append(informationVersion.InformationalVersion).AppendLine("\")]");
        }

        var source = sb.ToString();

        if (File.Exists(path))
        {
            var currentSource = File.ReadAllText(path);
            if (currentSource == source)
            {
                return;
            }
        }

        File.WriteAllText(path, source);
    }
}
